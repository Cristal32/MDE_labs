/*
 * generated by Xtext 2.36.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mindstormsdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mindstormsdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mindstormsdsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Choreography";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleChoreography
entryRuleChoreography returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChoreographyRule()); }
	iv_ruleChoreography=ruleChoreography
	{ $current=$iv_ruleChoreography.current; }
	EOF;

// Rule Choreography
ruleChoreography returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getChoreographyAccess().getChoreographyAction_0(),
					$current);
			}
		)
		otherlv_1='Choreography'
		{
			newLeafNode(otherlv_1, grammarAccess.getChoreographyAccess().getChoreographyKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChoreographyAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChoreographyRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.example.mindstormsdsl.MyDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getChoreographyAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='instructions'
			{
				newLeafNode(otherlv_4, grammarAccess.getChoreographyAccess().getInstructionsKeyword_4_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getChoreographyAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChoreographyAccess().getInstructionsInstructionParserRuleCall_4_2_0());
					}
					lv_instructions_6_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChoreographyRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_6_0,
							"org.xtext.example.mindstormsdsl.MyDsl.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getChoreographyAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getChoreographyAccess().getInstructionsInstructionParserRuleCall_4_3_1_0());
						}
						lv_instructions_8_0=ruleInstruction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getChoreographyRule());
							}
							add(
								$current,
								"instructions",
								lv_instructions_8_0,
								"org.xtext.example.mindstormsdsl.MyDsl.Instruction");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getChoreographyAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getChoreographyAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getChoreographyParserRuleCall_0());
		}
		this_Choreography_0=ruleChoreography
		{
			$current = $this_Choreography_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getGrabParserRuleCall_1());
		}
		this_Grab_1=ruleGrab
		{
			$current = $this_Grab_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getReleaseParserRuleCall_2());
		}
		this_Release_2=ruleRelease
		{
			$current = $this_Release_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getRotateParserRuleCall_3());
		}
		this_Rotate_3=ruleRotate
		{
			$current = $this_Rotate_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getGoForwardParserRuleCall_4());
		}
		this_GoForward_4=ruleGoForward
		{
			$current = $this_GoForward_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleGrab
entryRuleGrab returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGrabRule()); }
	iv_ruleGrab=ruleGrab
	{ $current=$iv_ruleGrab.current; }
	EOF;

// Rule Grab
ruleGrab returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGrabAccess().getGrabAction_0(),
					$current);
			}
		)
		otherlv_1='Grab'
		{
			newLeafNode(otherlv_1, grammarAccess.getGrabAccess().getGrabKeyword_1());
		}
	)
;

// Entry rule entryRuleRelease
entryRuleRelease returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReleaseRule()); }
	iv_ruleRelease=ruleRelease
	{ $current=$iv_ruleRelease.current; }
	EOF;

// Rule Release
ruleRelease returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReleaseAccess().getReleaseAction_0(),
					$current);
			}
		)
		otherlv_1='Release'
		{
			newLeafNode(otherlv_1, grammarAccess.getReleaseAccess().getReleaseKeyword_1());
		}
	)
;

// Entry rule entryRuleRotate
entryRuleRotate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRotateRule()); }
	iv_ruleRotate=ruleRotate
	{ $current=$iv_ruleRotate.current; }
	EOF;

// Rule Rotate
ruleRotate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRotateAccess().getRotateAction_0(),
					$current);
			}
		)
		(
			(
				lv_random_1_0='random'
				{
					newLeafNode(lv_random_1_0, grammarAccess.getRotateAccess().getRandomRandomKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRotateRule());
					}
					setWithLastConsumed($current, "random", lv_random_1_0 != null, "random");
				}
			)
		)?
		otherlv_2='Rotate'
		{
			newLeafNode(otherlv_2, grammarAccess.getRotateAccess().getRotateKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getRotateAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='degrees'
			{
				newLeafNode(otherlv_4, grammarAccess.getRotateAccess().getDegreesKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRotateAccess().getDegreesEIntParserRuleCall_4_1_0());
					}
					lv_degrees_5_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRotateRule());
						}
						set(
							$current,
							"degrees",
							lv_degrees_5_0,
							"org.xtext.example.mindstormsdsl.MyDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getRotateAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleGoForward
entryRuleGoForward returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoForwardRule()); }
	iv_ruleGoForward=ruleGoForward
	{ $current=$iv_ruleGoForward.current; }
	EOF;

// Rule GoForward
ruleGoForward returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGoForwardAccess().getGoForwardAction_0(),
					$current);
			}
		)
		otherlv_1='GoForward'
		{
			newLeafNode(otherlv_1, grammarAccess.getGoForwardAccess().getGoForwardKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getGoForwardAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='cm'
			{
				newLeafNode(otherlv_3, grammarAccess.getGoForwardAccess().getCmKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGoForwardAccess().getCmEIntParserRuleCall_3_1_0());
					}
					lv_cm_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGoForwardRule());
						}
						set(
							$current,
							"cm",
							lv_cm_4_0,
							"org.xtext.example.mindstormsdsl.MyDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getGoForwardAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
