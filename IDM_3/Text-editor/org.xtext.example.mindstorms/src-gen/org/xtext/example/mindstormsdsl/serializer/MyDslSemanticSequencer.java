/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mindstormsdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mindstorms.Choreography;
import mindstorms.GoForward;
import mindstorms.Grab;
import mindstorms.MindstormsPackage;
import mindstorms.Release;
import mindstorms.Rotate;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mindstormsdsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MindstormsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MindstormsPackage.CHOREOGRAPHY:
				sequence_Choreography(context, (Choreography) semanticObject); 
				return; 
			case MindstormsPackage.GO_FORWARD:
				sequence_GoForward(context, (GoForward) semanticObject); 
				return; 
			case MindstormsPackage.GRAB:
				sequence_Grab(context, (Grab) semanticObject); 
				return; 
			case MindstormsPackage.RELEASE:
				sequence_Release(context, (Release) semanticObject); 
				return; 
			case MindstormsPackage.ROTATE:
				sequence_Rotate(context, (Rotate) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Choreography returns Choreography
	 *     Instruction returns Choreography
	 *
	 * Constraint:
	 *     (name=EString (instructions+=Instruction instructions+=Instruction*)?)
	 * </pre>
	 */
	protected void sequence_Choreography(ISerializationContext context, Choreography semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns GoForward
	 *     GoForward returns GoForward
	 *
	 * Constraint:
	 *     cm=EInt?
	 * </pre>
	 */
	protected void sequence_GoForward(ISerializationContext context, GoForward semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns Grab
	 *     Grab returns Grab
	 *
	 * Constraint:
	 *     {Grab}
	 * </pre>
	 */
	protected void sequence_Grab(ISerializationContext context, Grab semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns Release
	 *     Release returns Release
	 *
	 * Constraint:
	 *     {Release}
	 * </pre>
	 */
	protected void sequence_Release(ISerializationContext context, Release semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns Rotate
	 *     Rotate returns Rotate
	 *
	 * Constraint:
	 *     (random?='random'? degrees=EInt?)
	 * </pre>
	 */
	protected void sequence_Rotate(ISerializationContext context, Rotate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
