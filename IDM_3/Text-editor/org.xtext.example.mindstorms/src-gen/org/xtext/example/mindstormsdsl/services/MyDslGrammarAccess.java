/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mindstormsdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ChoreographyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.Choreography");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChoreographyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChoreographyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInstructionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInstructionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_2_0 = (RuleCall)cInstructionsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInstructionsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_3_1_0 = (RuleCall)cInstructionsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Choreography returns Choreography:
		//    {Choreography}
		//    'Choreography'
		//    name=EString
		//    '{'
		//        ('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Choreography}
		//'Choreography'
		//name=EString
		//'{'
		//    ('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Choreography}
		public Action getChoreographyAction_0() { return cChoreographyAction_0; }
		
		//'Choreography'
		public Keyword getChoreographyKeyword_1() { return cChoreographyKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'instructions'
		public Keyword getInstructionsKeyword_4_0() { return cInstructionsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_4_2() { return cInstructionsAssignment_4_2; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_2_0() { return cInstructionsInstructionParserRuleCall_4_2_0; }
		
		//( "," instructions+=Instruction)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_4_3_1() { return cInstructionsAssignment_4_3_1; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_3_1_0() { return cInstructionsInstructionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChoreographyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGrabParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReleaseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRotateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGoForwardParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Instruction returns Instruction:
		//    Choreography | Grab | Release | Rotate | GoForward;
		@Override public ParserRule getRule() { return rule; }
		
		//Choreography | Grab | Release | Rotate | GoForward
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Choreography
		public RuleCall getChoreographyParserRuleCall_0() { return cChoreographyParserRuleCall_0; }
		
		//Grab
		public RuleCall getGrabParserRuleCall_1() { return cGrabParserRuleCall_1; }
		
		//Release
		public RuleCall getReleaseParserRuleCall_2() { return cReleaseParserRuleCall_2; }
		
		//Rotate
		public RuleCall getRotateParserRuleCall_3() { return cRotateParserRuleCall_3; }
		
		//GoForward
		public RuleCall getGoForwardParserRuleCall_4() { return cGoForwardParserRuleCall_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class GrabElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.Grab");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGrabAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrabKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Grab returns Grab:
		//    {Grab}
		//    'Grab'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Grab}
		//'Grab'
		public Group getGroup() { return cGroup; }
		
		//{Grab}
		public Action getGrabAction_0() { return cGrabAction_0; }
		
		//'Grab'
		public Keyword getGrabKeyword_1() { return cGrabKeyword_1; }
	}
	public class ReleaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.Release");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReleaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReleaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Release returns Release:
		//    {Release}
		//    'Release'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Release}
		//'Release'
		public Group getGroup() { return cGroup; }
		
		//{Release}
		public Action getReleaseAction_0() { return cReleaseAction_0; }
		
		//'Release'
		public Keyword getReleaseKeyword_1() { return cReleaseKeyword_1; }
	}
	public class RotateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.Rotate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRotateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRandomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRandomRandomKeyword_1_0 = (Keyword)cRandomAssignment_1.eContents().get(0);
		private final Keyword cRotateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDegreesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDegreesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDegreesEIntParserRuleCall_4_1_0 = (RuleCall)cDegreesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rotate returns Rotate:
		//    {Rotate}
		//    (random?='random')?
		//    'Rotate'
		//    '{'
		//        ('degrees' degrees=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Rotate}
		//(random?='random')?
		//'Rotate'
		//'{'
		//    ('degrees' degrees=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Rotate}
		public Action getRotateAction_0() { return cRotateAction_0; }
		
		//(random?='random')?
		public Assignment getRandomAssignment_1() { return cRandomAssignment_1; }
		
		//'random'
		public Keyword getRandomRandomKeyword_1_0() { return cRandomRandomKeyword_1_0; }
		
		//'Rotate'
		public Keyword getRotateKeyword_2() { return cRotateKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('degrees' degrees=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'degrees'
		public Keyword getDegreesKeyword_4_0() { return cDegreesKeyword_4_0; }
		
		//degrees=EInt
		public Assignment getDegreesAssignment_4_1() { return cDegreesAssignment_4_1; }
		
		//EInt
		public RuleCall getDegreesEIntParserRuleCall_4_1_0() { return cDegreesEIntParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GoForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.GoForward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGoForwardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGoForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCmKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCmAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCmEIntParserRuleCall_3_1_0 = (RuleCall)cCmAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GoForward returns GoForward:
		//    {GoForward}
		//    'GoForward'
		//    '{'
		//        ('cm' cm=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GoForward}
		//'GoForward'
		//'{'
		//    ('cm' cm=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{GoForward}
		public Action getGoForwardAction_0() { return cGoForwardAction_0; }
		
		//'GoForward'
		public Keyword getGoForwardKeyword_1() { return cGoForwardKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('cm' cm=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'cm'
		public Keyword getCmKeyword_3_0() { return cCmKeyword_3_0; }
		
		//cm=EInt
		public Assignment getCmAssignment_3_1() { return cCmAssignment_3_1; }
		
		//EInt
		public RuleCall getCmEIntParserRuleCall_3_1_0() { return cCmEIntParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mindstormsdsl.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final ChoreographyElements pChoreography;
	private final InstructionElements pInstruction;
	private final EStringElements pEString;
	private final GrabElements pGrab;
	private final ReleaseElements pRelease;
	private final RotateElements pRotate;
	private final GoForwardElements pGoForward;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pChoreography = new ChoreographyElements();
		this.pInstruction = new InstructionElements();
		this.pEString = new EStringElements();
		this.pGrab = new GrabElements();
		this.pRelease = new ReleaseElements();
		this.pRotate = new RotateElements();
		this.pGoForward = new GoForwardElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mindstormsdsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Choreography returns Choreography:
	//    {Choreography}
	//    'Choreography'
	//    name=EString
	//    '{'
	//        ('instructions' '{' instructions+=Instruction ( "," instructions+=Instruction)* '}' )?
	//    '}';
	public ChoreographyElements getChoreographyAccess() {
		return pChoreography;
	}
	
	public ParserRule getChoreographyRule() {
		return getChoreographyAccess().getRule();
	}
	
	//Instruction returns Instruction:
	//    Choreography | Grab | Release | Rotate | GoForward;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Grab returns Grab:
	//    {Grab}
	//    'Grab'
	//    ;
	public GrabElements getGrabAccess() {
		return pGrab;
	}
	
	public ParserRule getGrabRule() {
		return getGrabAccess().getRule();
	}
	
	//Release returns Release:
	//    {Release}
	//    'Release'
	//    ;
	public ReleaseElements getReleaseAccess() {
		return pRelease;
	}
	
	public ParserRule getReleaseRule() {
		return getReleaseAccess().getRule();
	}
	
	//Rotate returns Rotate:
	//    {Rotate}
	//    (random?='random')?
	//    'Rotate'
	//    '{'
	//        ('degrees' degrees=EInt)?
	//    '}';
	public RotateElements getRotateAccess() {
		return pRotate;
	}
	
	public ParserRule getRotateRule() {
		return getRotateAccess().getRule();
	}
	
	//GoForward returns GoForward:
	//    {GoForward}
	//    'GoForward'
	//    '{'
	//        ('cm' cm=EInt)?
	//    '}';
	public GoForwardElements getGoForwardAccess() {
		return pGoForward;
	}
	
	public ParserRule getGoForwardRule() {
		return getGoForwardAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
