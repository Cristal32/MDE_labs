/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl.formatting2;

import SQL.Column;
import SQL.DB;
import SQL.Table;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final DB dB, @Extension final IFormattableDocument document) {
    EList<Table> _tables = dB.getTables();
    for (final Table table : _tables) {
      document.<Table>format(table);
    }
  }

  protected void _format(final Table table, @Extension final IFormattableDocument document) {
    EList<Column> _columns = table.getColumns();
    for (final Column column : _columns) {
      document.<Column>format(column);
    }
  }

  @XbaseGenerated
  public void format(final Object dB, final IFormattableDocument document) {
    if (dB instanceof XtextResource) {
      _format((XtextResource)dB, document);
      return;
    } else if (dB instanceof DB) {
      _format((DB)dB, document);
      return;
    } else if (dB instanceof Table) {
      _format((Table)dB, document);
      return;
    } else if (dB instanceof EObject) {
      _format((EObject)dB, document);
      return;
    } else if (dB == null) {
      _format((Void)null, document);
      return;
    } else if (dB != null) {
      _format(dB, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(dB, document).toString());
    }
  }
}
